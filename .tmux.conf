# ==============================================================================
# Tmux configuration file for a modern, efficient terminal experience.
# ==============================================================================

# Set the default terminal type to support 256 colors.
set-option -g default-terminal "screen-256color"

# Enable true color support for compatible terminals.
set-option -ga terminal-overrides ",xterm:Tc"

# Enable terminal focus events for editor integrations (e.g., Neovim).
set-option -g focus-events on

# Enable mouse support for pane selection, resizing, and scrolling.
set -g mouse on

# =============================================================================
# COPY MODE (VI-style)
# =============================================================================

# Use vi keybindings in copy mode
setw -g mode-keys vi

# Provide strong visual feedback for selection
setw -g mode-style "fg=white,bg=colour238"

# Bind 'v' to begin selection in vi-style
bind -T copy-mode-vi v send-keys -X begin-selection

# --- For macOS ---
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'pbcopy'
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'pbcopy'

# --- For Linux (with xclip) ---
# You might need to install xclip: sudo apt-get install xclip
# Bind 'y' to yank (copy) the selection to the clipboard
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'
# Bind 'Enter' to also yank the selection (for convenience)
bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'

# --- For Linux remote SSH (OSC 52) ---
# Allows copying to the local clipboard from a remote server.
# Requires a modern terminal on your local machine (e.g., iTerm2, Kitty, Windows Terminal).
# bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "tmux save-buffer - | base64 | tr -d '\n' | xargs -I {} printf '\e]52;c;{}\a'"
# bind -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "tmux save-buffer - | base64 | tr -d '\n' | xargs -I {} printf '\e]52;c;{}\a'"

# =============================================================================
# PANE MANAGEMENT
# =============================================================================

# Switch panes using Alt + vim keys without the prefix.
bind -n M-h select-pane -L # Move left
bind -n M-l select-pane -R # Move right
bind -n M-k select-pane -U # Move up
bind -n M-j select-pane -D # Move down

# Resize panes using Alt + Arrow keys without the prefix.
# The -r flag makes the resizing repeatable.
bind -n -r M-Left resize-pane -L 2
bind -n -r M-Right resize-pane -R 2
bind -n -r M-Up resize-pane -U 2
bind -n -r M-Down resize-pane -D 2

# Renumber windows automatically when a window is closed
set-option -g renumber-windows on

# =============================================================================
# STATUS BAR
# =============================================================================

# --- General ---
set -g status-position top
set -g status-justify left
set -g status-style 'bg=default fg=colour244' # Transparent background, grey text
set -g status-interval 1                      # Refresh status bar every second

# --- Bubbles & Window Formatting ---
# Define colors for easier theme management
bubble_fg_dark='colour235'
bubble_bg_light_grey='colour242'
bubble_bg_grey='colour237'
bubble_bg_green='colour150'
bubble_fg_light='colour252'

# Active window bubble style
set-window-option -g window-status-current-style "bg=$bubble_bg_green fg=$bubble_fg_dark"

# Inactive window bubble style
set-window-option -g window-status-style "bg=$bubble_bg_light_grey fg=$bubble_fg_dark"

# Format window titles with padding.
# The '#{?window_flags,...}' part adds a flag like 'Z' when a pane is zoomed.
# '#[default]' resets the style to prevent color bleed to other elements.
set-window-option -g window-status-format " #I:#W#{?window_flags,#{window_flags}, } #[default]"
set-window-option -g window-status-current-format " #I:#W#{?window_flags,#{window_flags}, } #[default]"


# --- Left Content: Session Name ---
set -g status-left-length 40
set -g status-left "#[bg=$bubble_bg_grey,fg=$bubble_fg_light]  #S #[default]"


# --- Right Content: Git Branch | Time ---
set -g status-right-length 60

# The final status-right is built from these modules
# It calls a standard git command in the shell to get the branch name.
# '2>/dev/null' silences errors if you are not in a git repository.
set -g status-right "#[bg=default,fg=default]  #(git -C #{pane_current_path} rev-parse --abbrev-ref HEAD 2>/dev/null) #[default] #[bg=$bubble_bg_green,fg=$bubble_fg_dark]  %R #[default]"
